     1                                  ;	+--------+
     2                                  ;	|        |
     3                                  ;	|        |
     4                                  ;	|--------| 4000:0000
     5                                  ;	|        |
     6                                  ;	|  FAT   |
     7                                  ;	|        |
     8                                  ;	|--------| 2000:0000
     9                                  ;	|BOOT SEC|
    10                                  ;	|RELOCATE|
    11                                  ;	|--------| 1FE0:0000
    12                                  ;	|        |
    13                                  ;	|        |
    14                                  ;	|        |
    15                                  ;	|        |
    16                                  ;	|--------|
    17                                  ;	|BOOT SEC|
    18                                  ;	|ORIGIN  | 07C0:0000
    19                                  ;	|--------|
    20                                  ;	|        |
    21                                  ;	|        |
    22                                  ;	|        |
    23                                  ;	|--------|
    24                                  ;	|KERNEL  |
    25                                  ;	|LOADED  |
    26                                  ;	|--------| 0060:0000
    27                                  ;	|        |
    28                                  ;	+--------+
    29                                  
    30                                  ;%define MULTI_SEC_READ  1
    31                                  
    32                                  
    33                                  segment	.text
    34                                  
    35                                  %define BASE            0x7c00
    36                                  
    37                                                  org     BASE
    38                                  
    39 00000000 EB58                    Entry:          jmp     short real_start
    40 00000002 90                      		nop
    41                                  
    42                                  ;       bp is initialized to 7c00h
    43                                  %define bsOemName       bp+0x03      ; OEM label
    44                                  %define bsBytesPerSec   bp+0x0b      ; bytes/sector
    45                                  %define bsSecPerClust   bp+0x0d      ; sectors/allocation unit
    46                                  %define bsResSectors    bp+0x0e      ; # reserved sectors
    47                                  %define bsFATs          bp+0x10      ; # of fats
    48                                  %define bsRootDirEnts   bp+0x11      ; # of root dir entries
    49                                  %define bsSectors       bp+0x13      ; # sectors total in image
    50                                  %define bsMedia         bp+0x15      ; media descrip: fd=2side9sec, etc...
    51                                  %define sectPerFat      bp+0x16      ; # sectors in a fat
    52                                  %define sectPerTrack    bp+0x18      ; # sectors/track
    53                                  %define nHeads          bp+0x1a      ; # heads
    54                                  %define nHidden         bp+0x1c      ; # hidden sectors
    55                                  %define nSectorHuge     bp+0x20      ; # sectors if > 65536
    56                                  %define xsectPerFat     bp+0x24      ; Sectors/Fat
    57                                  %define xrootClst       bp+0x2c      ; Starting cluster of root directory
    58                                  %define drive           bp+0x40      ; Drive number
    59                                  
    60 00000003 00<rept>                		times	0x5a-$+$$ db 0
    61                                  
    62                                  %define LOADSEG         0x0060
    63                                  
    64                                  %define FATSEG          0x2000         
    65                                  
    66                                  %define fat_sector      bp+0x48         ; last accessed sector of the FAT
    67                                  
    68                                  %define loadsegoff_60	bp+loadseg_off-Entry ; FAR pointer = 60:0
    69                                  %define loadseg_60	bp+loadseg_seg-Entry
    70                                  
    71                                  %define fat_start       bp+0x5e         ; first FAT sector
    72                                  %define data_start      bp+0x62         ; first data sector
    73                                  %define fat_secmask     bp+0x66		; number of clusters in a FAT sector - 1
    74                                  %define fat_secshift    bp+0x68         ; fat_secmask+1 = 2^fat_secshift
    75                                  
    76                                  ;-----------------------------------------------------------------------
    77                                  ;   ENTRY
    78                                  ;-----------------------------------------------------------------------
    79                                  
    80 0000005A FC                      real_start:     cld
    81 0000005B FA                      		cli
    82 0000005C 29C0                                    sub	ax, ax
    83 0000005E 8ED8                    		mov	ds, ax
    84 00000060 BD007C                                  mov     bp, 0x7c00
    85                                  
    86 00000063 B8E01F                  		mov	ax, 0x1FE0
    87 00000066 8EC0                    		mov	es, ax
    88 00000068 89EE                    		mov	si, bp
    89 0000006A 89EF                    		mov	di, bp
    90 0000006C B90001                  		mov	cx, 0x0100
    91 0000006F F3A5                    		rep	movsw           ; move boot code to the 0x1FE0:0x0000
    92 00000071 EA[7A00]E01F            		jmp     word 0x1FE0:cont
    93                                  
    94 00000076 0000                    loadseg_off	dw	0
    95 00000078 6000                    loadseg_seg	dw	LOADSEG
    96                                  
    97 0000007A 8ED8                    cont:           mov     ds, ax
    98 0000007C 8ED0                                    mov     ss, ax
    99 0000007E 8D66E0                                  lea     sp, [bp-0x20]
   100 00000081 FB                      		sti
   101 00000082 885640                                  mov     [drive], dl     ; BIOS passes drive number in DL
   102                                  
   103                                  ;                call    print
   104                                  ;                db      "Loading ",0
   105                                  
   106                                  ;      Calc Params
   107                                  ;      Fat_Start
   108 00000085 8B761C                  		mov	si, word [nHidden]
   109 00000088 8B7E1E                  		mov	di, word [nHidden+2]
   110 0000008B 03760E                  		add	si, word [bsResSectors]
   111 0000008E 83D700                  		adc	di, byte 0
   112                                  
   113 00000091 89765E                  		mov	word [fat_start], si
   114 00000094 897E60                  		mov	word [fat_start+2], di
   115                                   ;	Data_Start
   116 00000097 8A4610                  		mov	al, [bsFATs]
   117 0000009A 98                      		cbw
   118 0000009B 50                      		push	ax
   119 0000009C F76626                  		mul	word [xsectPerFat+2]
   120 0000009F 01C7                    		add	di, ax
   121 000000A1 58                      		pop	ax
   122 000000A2 F76624                  		mul	word [xsectPerFat]
   123 000000A5 01F0                    		add	ax, si
   124 000000A7 11FA                    		adc	dx, di
   125 000000A9 894662                  		mov	word[data_start], ax
   126 000000AC 895664                  		mov	word[data_start+2], dx
   127                                  ;      fat_secmask
   128 000000AF 8B460B                  		mov	ax, word[bsBytesPerSec]
   129 000000B2 D1E8                    		shr	ax, 1
   130 000000B4 D1E8                    		shr	ax, 1
   131 000000B6 48                      		dec	ax
   132 000000B7 894666                  		mov	word [fat_secmask], ax
   133                                  ;      fat_secshift
   134                                  ; cx = temp
   135                                  ; ax = fat_secshift
   136 000000BA 91                      		xchg	ax, cx ; cx = 0 after movsw
   137 000000BB 41                      		inc	cx
   138 000000BC 40                      secshift:	inc	ax
   139 000000BD D1E9                    		shr	cx, 1
   140 000000BF 81F90100                		cmp	cx, 1
   141 000000C3 75F7                    		jne	secshift
   142 000000C5 884668                  		mov	byte [fat_secshift], al
   143 000000C8 49                      		dec	cx
   144                                   
   145                                  ;       FINDFILE: Searches for the file in the root directory.
   146                                  ;
   147                                  ;       Returns:
   148                                  ;            DX:AX = first cluster of file
   149                                  
   150 000000C9 894E48                                  mov     word [fat_sector], cx           ; CX is 0 after "dec"
   151 000000CC 894E4A                                  mov     word [fat_sector + 2], cx
   152                                  
   153 000000CF 8B462C                                  mov     ax, word [xrootClst]
   154 000000D2 8B562E                                  mov     dx, word [xrootClst + 2]
   155                                  ff_next_cluster:
   156 000000D5 52                                      push    dx                              ; save cluster
   157 000000D6 50                                      push    ax
   158 000000D7 E89D00                                  call    convert_cluster
   159 000000DA 7250                                    jc      boot_error                      ; EOC encountered
   160                                                                  
   161                                  ff_next_sector:
   162 000000DC 53                                      push    bx                              ; save sector count
   163                                  
   164 000000DD C45E76                                  les     bx, [loadsegoff_60]
   165 000000E0 E8CB00                                  call    readDisk
   166 000000E3 52                                      push    dx                              ; save sector
   167 000000E4 50                                      push    ax
   168                                  
   169 000000E5 8B460B                                  mov     ax, [bsBytesPerSec]
   170                                  
   171                                  		; Search for KERNEL.SYS file name, and find start cluster.
   172 000000E8 B90B00                  ff_next_entry:  mov     cx, 11
   173 000000EB BE[F101]                                mov     si, filename
   174 000000EE 89C7                                    mov     di, ax
   175 000000F0 81EF2000                                sub     di, 0x20
   176 000000F4 F3A6                                    repe    cmpsb
   177 000000F6 7412                                    jz      ff_done
   178                                  
   179 000000F8 2D2000                                  sub     ax, 0x20
   180 000000FB 75EB                                    jnz     ff_next_entry
   181 000000FD 58                                      pop     ax                      ; restore  sector
   182 000000FE 5A                                      pop     dx
   183 000000FF 5B                                      pop     bx                      ; restore sector count
   184 00000100 4B                                      dec     bx
   185 00000101 75D9                                    jnz     ff_next_sector
   186                                  ff_find_next_cluster:
   187 00000103 58                                      pop     ax                      ; restore current cluster
   188 00000104 5A                                      pop     dx
   189 00000105 E82A00                                  call    next_cluster
   190 00000108 EBCB                                    jmp     short ff_next_cluster
   191                                  ff_done:
   192                                                  
   193 0000010A 268B450F                                mov     ax, [es:di+0x1A-11]        ; get cluster number
   194 0000010E 268B5509                                mov     dx, [es:di+0x14-11]
   195                                  c4:
   196 00000112 29DB                                    sub     bx, bx                  ; ES points to LOADSEG      
   197 00000114 52                      c5:             push    dx
   198 00000115 50                                      push    ax
   199 00000116 53                                      push    bx
   200 00000117 E85D00                                  call    convert_cluster
   201 0000011A 7255                                    jc      boot_success
   202 0000011C 89DF                                    mov     di, bx
   203 0000011E 5B                                      pop     bx
   204                                  c6:
   205 0000011F E88C00                                  call    readDisk
   206 00000122 4F                                      dec     di
   207 00000123 75FA                                    jnz     c6
   208 00000125 58                                      pop     ax
   209 00000126 5A                                      pop     dx
   210 00000127 E80800                                  call    next_cluster
   211 0000012A EBE8                                    jmp     short c5
   212                                                  
   213                                  boot_error:
   214 0000012C 30E4                    		xor	ah,ah
   215 0000012E CD16                    		int	0x16			; wait for a key
   216 00000130 CD19                    		int	0x19			; reboot the machine
   217                                  
   218                                  ; input: 
   219                                  ;    DX:AX - cluster
   220                                  ; output:
   221                                  ;    DX:AX - next cluster
   222                                  ;    CX = 0
   223                                  ; modify:
   224                                  ;    DI
   225                                  next_cluster:  
   226 00000132 06                                      push    es
   227 00000133 89C7                                    mov     di, ax
   228 00000135 237E66                                  and     di, [fat_secmask]
   229                                                  
   230 00000138 8B4E68                                  mov     cx, [fat_secshift]
   231                                  cn_loop:
   232 0000013B D1EA                                    shr     dx,1
   233 0000013D D1D8                                    rcr     ax,1
   234 0000013F 49                                      dec     cx
   235 00000140 75F9                                    jnz     cn_loop                ; DX:AX fat sector where our
   236                                                                                 ; cluster resides
   237                                                                                 ; DI - cluster index in this
   238                                                                                 ; sector
   239                                                                                 
   240 00000142 D1E7                                    shl     di,1                   ; DI - offset in the sector
   241 00000144 D1E7                                    shl     di,1
   242 00000146 03465E                                  add     ax, [fat_start]
   243 00000149 135660                                  adc     dx, [fat_start+2]      ; DX:AX absolute fat sector
   244                                  
   245 0000014C 53                                      push    bx
   246 0000014D BB0020                                  mov     bx, FATSEG
   247 00000150 8EC3                                    mov     es, bx
   248 00000152 29DB                                    sub     bx, bx
   249                                  
   250 00000154 3B4648                                  cmp     ax, [fat_sector]
   251 00000157 7505                                    jne     cn1                    ; if the last fat sector we
   252                                                                                 ; read was this, than skip
   253 00000159 3B564A                                  cmp     dx,[fat_sector+2]
   254 0000015C 7409                                    je      cn_exit
   255                                  cn1:
   256 0000015E 894648                                  mov     [fat_sector],ax        ; save the fat sector number,
   257 00000161 89564A                                  mov     [fat_sector+2],dx      ; we are going to read
   258 00000164 E84700                                  call    readDisk
   259                                  cn_exit:
   260 00000167 5B                                      pop     bx
   261 00000168 268B05                                  mov     ax, [es:di]             ; DX:AX - next cluster
   262 0000016B 268B5502                                mov     dx, [es:di + 2]         ;
   263 0000016F 07                                      pop     es
   264 00000170 C3                                      ret
   265                                  
   266                                  
   267                                  boot_success:   
   268 00000171 8A5E40                                  mov     bl, [drive]
   269 00000174 FF6E76                  		jmp	far [loadsegoff_60]
   270                                  
   271                                  ; Convert cluster to the absolute sector
   272                                  ;input:
   273                                  ;    DX:AX - target cluster
   274                                  ;output:
   275                                  ;    DX:AX - absoulute sector
   276                                  ;    BX - [bsSectPerClust]
   277                                  ;modify:
   278                                  ;    CX
   279                                  convert_cluster:
   280 00000177 81FAFF0F                                cmp     dx,0x0fff
   281 0000017B 7507                                    jne     c3
   282 0000017D 3DF8FF                                  cmp     ax,0xfff8
   283 00000180 7202                                    jb      c3              ; if cluster is EOC (carry is set), do ret
   284 00000182 F9                                      stc
   285 00000183 C3                                      ret
   286                                  c3:
   287 00000184 89D1                                    mov     cx, dx          ; sector = (cluster - 2)*clussize +
   288                                                                          ; + data_start
   289 00000186 2D0200                                  sub     ax, 2
   290 00000189 83D900                                  sbb     cx, byte 0           ; CX:AX == cluster - 2
   291 0000018C 8A5E0D                                  mov     bl, [bsSecPerClust]
   292 0000018F 28FF                                    sub     bh, bh
   293 00000191 91                                      xchg    cx, ax          ; AX:CX == cluster - 2
   294 00000192 F7E3                                    mul     bx              ; first handle high word
   295                                                                          ; DX must be 0 here
   296 00000194 91                                      xchg    ax, cx          ; then low word
   297 00000195 F7E3                                    mul     bx
   298 00000197 01CA                                    add     dx, cx                          ; DX:AX target sector
   299 00000199 034662                                  add     ax, [data_start]
   300 0000019C 135664                                  adc     dx, [data_start + 2]
   301 0000019F C3                                      ret
   302                                  
   303                                  ; prints text after call to this function.
   304                                  
   305                                  print_1char:        
   306 000001A0 31DB                                    xor   bx, bx                   ; video page 0
   307 000001A2 B40E                                    mov   ah, 0x0E                 ; else print it
   308 000001A4 CD10                                    int   0x10                     ; via TTY mode
   309 000001A6 5E                      print:          pop   si                       ; this is the first character
   310 000001A7 AC                      print1:         lodsb                          ; get token
   311 000001A8 56                                      push  si                       ; stack up potential return address
   312 000001A9 3C00                                    cmp   al, 0                    ; end of string?
   313 000001AB 75F3                                    jne   print_1char              ; until done
   314 000001AD C3                                      ret                            ; and jump to it
   315                                                  
   316                                  ;input:
   317                                  ;   DX:AX - 32-bit DOS sector number
   318                                  ;   ES:BX - destination buffer
   319                                  ;output:
   320                                  ;   ES:BX points one byte after the last byte read.
   321                                  ;   DX:AX - next sector
   322                                  ;modify:
   323                                  ;   ES if DI * bsBytesPerSec >= 65536, CX
   324                                  
   325                                  readDisk:
   326 000001AE 52                      read_next:      push    dx
   327 000001AF 50                                      push    ax
   328                                                  ;
   329                                                  ; translate sector number to BIOS parameters
   330                                                  ;
   331                                  
   332                                                  ;
   333                                                  ; abs = sector                          offset in track
   334                                                  ;     + head * sectPerTrack             offset in cylinder
   335                                                  ;     + track * sectPerTrack * nHeads   offset in platter
   336                                                  ;
   337 000001B0 91                                      xchg    ax, cx
   338 000001B1 8A4618                                  mov     al, [sectPerTrack]
   339 000001B4 F6661A                                  mul     byte [nHeads]
   340 000001B7 91                                      xchg    ax, cx
   341                                                  ; cx = nHeads * sectPerTrack <= 255*63
   342                                                  ; dx:ax = abs
   343 000001B8 F7F1                                    div     cx
   344                                                  ; ax = track, dx = sector + head * sectPertrack
   345 000001BA 92                                      xchg    ax, dx
   346                                                  ; dx = track, ax = sector + head * sectPertrack
   347 000001BB F67618                                  div     byte [sectPerTrack]
   348                                                  ; dx =  track, al = head, ah = sector
   349 000001BE 89D1                                    mov     cx, dx
   350                                                  ; cx =  track, al = head, ah = sector
   351                                  
   352                                                  ; the following manipulations are necessary in order to
   353                                                  ; properly place parameters into registers.
   354                                                  ; ch = cylinder number low 8 bits
   355                                                  ; cl = 7-6: cylinder high two bits
   356                                                  ;      5-0: sector
   357 000001C0 88C6                                    mov     dh, al                  ; save head into dh for bios
   358 000001C2 86E9                                    xchg    ch, cl                  ; set cyl no low 8 bits
   359 000001C4 D0C9                                    ror     cl, 1                   ; move track high bits into
   360 000001C6 D0C9                                    ror     cl, 1                   ; bits 7-6 (assumes top = 0)
   361 000001C8 FEC4                                    inc     ah                      ; sector offset from 1
   362 000001CA 08E1                                    or      cl, ah                  ; merge sector into cylinder
   363                                  
   364 000001CC B80102                                  mov     ax, 0x0201
   365 000001CF 8A5640                                  mov     dl, [drive]
   366 000001D2 CD13                                    int     0x13
   367                                  
   368 000001D4 58                                      pop     ax
   369 000001D5 5A                                      pop     dx         
   370 000001D6 7306                                    jnc     read_ok                 ; jump if no error
   371 000001D8 30E4                                    xor     ah, ah                  ; else, reset floppy
   372 000001DA CD13                                    int     0x13
   373 000001DC EBD0                                    jmp     short read_next
   374                                  read_ok:
   375 000001DE 035E0B                                  add     bx, word [bsBytesPerSec]
   376                                  
   377 000001E1 7307                                    jnc     no_incr_es              ; if overflow...
   378                                  
   379 000001E3 8CC1                                    mov     cx, es
   380 000001E5 80C510                                  add     ch, 0x10                ; ...add 1000h to ES
   381 000001E8 8EC1                                    mov     es, cx
   382                                  
   383                                  no_incr_es:
   384 000001EA 83C001                                  add     ax,byte 1
   385 000001ED 83D200                                  adc     dx,byte 0
   386 000001F0 C3                                      ret
   387                                  
   388                                         times   0x01f1-$+$$ db 0
   389                                  
   390 000001F1 4B45524E454C202053-     filename        db      "KERNEL  SYS",0,0
   391 000001FA 59530000           
   392                                  
   393 000001FE 55AA                    sign            dw      0xAA55
